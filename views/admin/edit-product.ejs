<%- include("../../views/partials/admin/header") %>

<!-- Add these in the head section -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    :root {
        --primary-color: #667eea;
        --secondary-color: #764ba2;
        --danger-color: #ef4444;
        --success-color: #10b981;
        --light-gray: #f3f4f6;
        --medium-gray: #e5e7eb;
        --dark-gray: #374151;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--light-gray);
    }

    .main-content {
        padding: 2rem;
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        padding: 1.5rem 2rem;
        border-radius: 0.75rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0;
    }

    .form-card {
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .card-header {
        background-color: #f9fafb;
        color: var(--dark-gray);
        padding: 1rem 1.5rem;
        font-weight: 600;
        border-bottom: 1px solid var(--medium-gray);
    }

    .card-body {
        padding: 1.5rem;
    }

    .form-label {
        font-weight: 500;
        color: var(--dark-gray);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-control, .form-select {
        border: 1px solid var(--medium-gray);
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        transition: all 0.2s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
    }
    
    .form-control.is-invalid, .form-select.is-invalid {
        border-color: var(--danger-color);
    }
    .invalid-feedback {
        color: var(--danger-color);
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }
    
    #image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: 1rem;
    }

    .preview-container {
        position: relative;
        width: 120px;
        height: 120px;
        border: 1px solid var(--medium-gray);
        border-radius: 0.5rem;
        overflow: hidden;
    }
    
    .preview-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 14px;
    }
</style>

<div class="main-content">
    <div class="page-header">
        <h2 class="page-title">✏️ Edit Product</h2>
        <p class="mb-0 mt-1 opacity-90">Update the details of your product.</p>
    </div>

    <form id="productForm" novalidate>
        <div class="row">
            <div class="col-lg-8">
                <div class="card form-card mb-4">
                    <div class="card-header">Product Information</div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="productName" value="<%= product.productName %>" required>
                            <div class="invalid-feedback">Product name is required.</div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="4" required><%= product.description %></textarea>
                            <div class="invalid-feedback">A brief description is required.</div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="regularPrice" class="form-label">Regular Price</label>
                                <input type="number" class="form-control" id="regularPrice" name="regularPrice" value="<%= product.regularPrice %>" min="1" required>
                                <div class="invalid-feedback">Price must be at least 1.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="salesPrice" class="form-label">Sales Price</label>
                                <input type="number" class="form-control" id="salesPrice" name="salesPrice" value="<%= product.salesPrice %>" min="1" required>
                                <div class="invalid-feedback">Sales price must be less than regular price.</div>
                            </div>
                        </div>
                         <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="category" class="form-label">Category</label>
                                <select class="form-select" id="category" name="category" required>
                                    <option value="" disabled>Select a category</option>
                                    <% cat.forEach(c => { %>
                                        <option value="<%= c.name %>" <%= product.category.toString() === c._id.toString() ? 'selected' : '' %>><%= c.name %></option>
                                    <% }); %>
                                </select>
                                <div class="invalid-feedback">Please select a category.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="brand" class="form-label">Brand</label>
                                <select class="form-select" id="brand" name="brand" required>
                                    <option value="" disabled>Select a brand</option>
                                     <% brand.forEach(b => { %>
                                        <option value="<%= b.brandName %>" <%= (product.brand && product.brand.brandName === b.brandName) ? 'selected' : '' %>><%= b.brandName %></option>
                                    <% }); %>
                                </select>
                                <div class="invalid-feedback">Please select a brand.</div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" value="<%= product.stock %>" min="1" required>
                            <div class="invalid-feedback">Quantity must be at least 1.</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card form-card mb-4">
                    <div class="card-header">Product Images</div>
                    <div class="card-body">
                        <label for="images" class="btn btn-secondary w-100">Click to Add New Images</label>
                        <input type="file" class="form-control d-none" id="images" name="images" multiple accept="image/jpeg, image/png, image/jpg">
                        <div class="form-text text-center my-2">You can have up to 4 images.</div>
                        <div id="image-preview-container"></div>
                        <div class="invalid-feedback d-block" id="images-error" style="display:none;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="text-end">
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
    </form>
</div>

<!-- Image Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container" style="max-height: 500px;">
                    <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop & Add</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('productForm');
    const imageInput = document.getElementById('images');
    const previewContainer = document.getElementById('image-preview-container');
    const cropperModalEl = document.getElementById('cropperModal');
    const cropperModal = new bootstrap.Modal(cropperModalEl);
    const cropperImage = document.getElementById('cropperImage');
    const cropButton = document.getElementById('cropButton');
    
    let imageCollection = []; // This will hold both existing and new images
    let filesToCrop = [];
    let currentFileIndex = 0;
    let cropper;

    // Initialize with existing images
    const existingImages = <%- JSON.stringify(product.productImage) %>;
    existingImages.forEach(imgName => {
        imageCollection.push({ type: 'existing', name: imgName });
    });

    const validateForm = () => {
        let isValid = true;
        form.querySelectorAll('[required]').forEach(field => field.classList.remove('is-invalid'));
        document.getElementById('images-error').style.display = 'none';

        if (!form.querySelector('#productName').value.trim()) {
            form.querySelector('#productName').classList.add('is-invalid');
            isValid = false;
        }
        if (!form.querySelector('#description').value.trim()) {
            form.querySelector('#description').classList.add('is-invalid');
            isValid = false;
        }
        const regularPrice = parseFloat(form.querySelector('#regularPrice').value);
        const salesPrice = parseFloat(form.querySelector('#salesPrice').value);
        if (isNaN(regularPrice) || regularPrice < 1) {
            form.querySelector('#regularPrice').classList.add('is-invalid');
            isValid = false;
        }
        if (isNaN(salesPrice) || salesPrice < 1 || salesPrice > regularPrice) {
            form.querySelector('#salesPrice').classList.add('is-invalid');
            isValid = false;
        }
        if (!form.querySelector('#category').value) {
            form.querySelector('#category').classList.add('is-invalid');
            isValid = false;
        }
        if (!form.querySelector('#brand').value) {
            form.querySelector('#brand').classList.add('is-invalid');
            isValid = false;
        }
        if (isNaN(parseInt(form.querySelector('#quantity').value)) || parseInt(form.querySelector('#quantity').value) < 1) {
            form.querySelector('#quantity').classList.add('is-invalid');
            isValid = false;
        }
        if (imageCollection.length === 0) {
            document.getElementById('images-error').textContent = 'At least one image is required.';
            document.getElementById('images-error').style.display = 'block';
            isValid = false;
        }
        if (imageCollection.length > 4) {
            document.getElementById('images-error').textContent = 'You can have a maximum of 4 images.';
            document.getElementById('images-error').style.display = 'block';
            isValid = false;
        }
        return isValid;
    };

    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        if (!validateForm()) {
            Swal.fire("Error", "Please fill all required fields properly.", "error");
            return;
        }

        const formData = new FormData();
        formData.append('productName', form.querySelector('#productName').value);
        formData.append('description', form.querySelector('#description').value);
        formData.append('regularPrice', form.querySelector('#regularPrice').value);
        formData.append('salesPrice', form.querySelector('#salesPrice').value);
        formData.append('category', form.querySelector('#category').value);
        formData.append('brand', form.querySelector('#brand').value);
        formData.append('quantity', form.querySelector('#quantity').value);

        const existingImagesToKeep = imageCollection.filter(img => img.type === 'existing').map(img => img.name);
        formData.append('existingImages', JSON.stringify(existingImagesToKeep));

        imageCollection.filter(img => img.type === 'new').forEach(file => {
            formData.append('images', file.blob, file.name);
        });

        try {
            const response = await fetch('/admin/editProduct/<%= product._id %>', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                await Swal.fire("Success", "Changes saved successfully!", "success");
                window.location.href = '/admin/products';
            } else {
                Swal.fire("Error", result.error || 'An unexpected error occurred.', "error");
            }
        } catch (error) {
            console.error('Submission error:', error);
            Swal.fire("Error", "Could not connect to the server.", "error");
        }
    });

    imageInput.addEventListener('change', function(event) {
        const files = Array.from(event.target.files);
        const availableSlots = 4 - imageCollection.length;
        if (files.length > availableSlots) {
            Swal.fire("Image limit exceeded", "You can upload up to 4 images only.", "error");
            imageInput.value = '';
            return;
        }

        filesToCrop = files.filter(file => file.type.startsWith('image/'));
        currentFileIndex = 0;
        if (filesToCrop.length > 0) {
            openCropperForFile(filesToCrop[currentFileIndex]);
        }
    });
    
    function openCropperForFile(file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            cropperImage.src = e.target.result;
            cropperModal.show();
        };
        reader.readAsDataURL(file);
    }

    cropperModalEl.addEventListener('shown.bs.modal', function () {
        if (cropper) cropper.destroy();
        cropper = new Cropper(cropperImage, { aspectRatio: 1, viewMode: 1 });
    });

    cropperModalEl.addEventListener('hidden.bs.modal', function () {
        if (cropper) cropper.destroy();
        cropper = null;
    });
    
    cropButton.addEventListener('click', function() {
        if (!cropper) return;
        const canvas = cropper.getCroppedCanvas({ width: 800, height: 800 });
        canvas.toBlob((blob) => {
            const currentFile = filesToCrop[currentFileIndex];
            imageCollection.push({ type: 'new', blob, name: currentFile.name });
            updateImagePreviews();
            
            currentFileIndex++;
            if (currentFileIndex < filesToCrop.length) {
                openCropperForFile(filesToCrop[currentFileIndex]);
            } else {
                cropperModal.hide();
                imageInput.value = '';
            }
        }, 'image/jpeg');
    });

    function updateImagePreviews() {
        previewContainer.innerHTML = '';
        imageCollection.forEach((file, index) => {
            const previewWrapper = document.createElement('div');
            previewWrapper.className = 'preview-container';
            
            const img = document.createElement('img');
            if (file.type === 'existing') {
                img.src = `/uploads/product-images/${file.name}`;
            } else {
                img.src = URL.createObjectURL(file.blob);
            }

            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-image';
            removeBtn.innerHTML = '×';
            removeBtn.onclick = () => {
                imageCollection.splice(index, 1);
                updateImagePreviews();
            };

            previewWrapper.appendChild(img);
            previewWrapper.appendChild(removeBtn);
            previewContainer.appendChild(previewWrapper);
        });
    }

    // Initial render of existing images
    updateImagePreviews();
});
</script>

<%- include("../../views/partials/admin/footer") %>