<%- include('../partials/admin/header') %>

<!-- Add these in the head section -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<div class="container-fluid">
    <div class="row">
        <%- include('../partials/admin/sidebar') %>
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Add Product</h1>
            </div>

            <form action="/admin/addProduct" method="POST" enctype="multipart/form-data" id="addProductForm">
                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="productName" class="form-label">Product Name</label>
                                    <input type="text" class="form-control" id="productName" name="productName" required>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="category" class="form-label">Category</label>
                                            <select class="form-select" id="category" name="category" required>
                                                <option value="">Select Category</option>
                                                <% categories.forEach(category => { %>
                                                    <option value="<%= category._id %>"><%= category.name %></option>
                                                <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="brand" class="form-label">Brand</label>
                                            <select class="form-select" id="brand" name="brand" required>
                                                <option value="">Select Brand</option>
                                                <% brands.forEach(brand => { %>
                                                    <option value="<%= brand._id %>"><%= brand.brandName %></option>
                                                <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="regularPrice" class="form-label">Regular Price</label>
                                            <input type="number" class="form-control" id="regularPrice" name="regularPrice" required>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label for="salesPrice" class="form-label">Sales Price</label>
                                            <input type="number" class="form-control" id="salesPrice" name="salesPrice" required>
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="quantity" class="form-label">Quantity</label>
                                    <input type="number" class="form-control" id="quantity" name="quantity" required>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="productImage" class="form-label">Product Images (Up to 4 images)</label>
                                    <input type="file" class="form-control" id="productImage" name="productImage" multiple accept="image/*">
                                    <div id="imagePreview" class="mt-3 d-flex flex-wrap gap-2"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-end mb-4">
                    <button type="submit" class="btn btn-primary">Add Product</button>
                </div>
            </form>
        </main>
    </div>
</div>

<!-- Image Cropper Modal -->
<div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropperImage" src="" alt="Image to crop">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

<style>
.img-container {
    max-height: 500px;
    overflow: hidden;
}

#cropperImage {
    max-width: 100%;
}

#imagePreview {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 15px;
}

.preview-container {
    position: relative;
    width: 150px;
    height: 150px;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
}

.preview-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.preview-container .remove-image {
    position: absolute;
    top: 5px;
    right: 5px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 16px;
    color: #ff0000;
    z-index: 1;
}

.preview-container .remove-image:hover {
    background: rgba(255, 255, 255, 1);
}

.modal-dialog {
    max-width: 800px;
}

.modal-body {
    padding: 0;
}

.img-container {
    max-height: 500px;
    width: 100%;
}

#cropperImage {
    max-width: 100%;
    max-height: 500px;
    display: block;
}

/* Force Cropper.js styles */
.cropper-container, .cropper-canvas, .cropper-drag-box, .cropper-crop-box, .cropper-view-box, .cropper-face, .cropper-line, .cropper-point {
  all: unset;
  box-sizing: border-box !important;
}
.cropper-container {
  position: absolute !important;
  top: 0; left: 0; right: 0; bottom: 0;
  width: 100% !important;
  height: 100% !important;
  z-index: 1050 !important;
}
</style>

<script>
let cropper;
let filesToCrop = [];
let croppedImages = [];
let currentFileIndex = 0;
const cropperModalEl = document.getElementById('cropperModal');
const cropperModal = new bootstrap.Modal(cropperModalEl);

function showCropperForFile(file) {
    const reader = new FileReader();
    reader.onload = function(e) {
        const img = document.getElementById('cropperImage');
        img.src = e.target.result;
        img.onload = function() {
            cropperModal.show();
        };
    };
    reader.onerror = function(e) { console.error('FileReader error:', e); };
    reader.readAsDataURL(file);
}

document.getElementById('productImage').addEventListener('change', function(e) {
    filesToCrop = Array.from(e.target.files).slice(0, 4 - croppedImages.length); // Limit to 4 images
    currentFileIndex = 0;
    if (filesToCrop.length > 0) {
        showCropperForFile(filesToCrop[currentFileIndex]);
    }
});

// Always destroy and re-init cropper after modal is shown and image is loaded
cropperModalEl.addEventListener('shown.bs.modal', function () {
    const img = document.getElementById('cropperImage');
    if (cropper) cropper.destroy();
    setTimeout(() => {
        cropper = new Cropper(img, {
            aspectRatio: 1,
            viewMode: 1,
            dragMode: 'move',
            autoCropArea: 1,
            restore: false,
            guides: true,
            center: true,
            highlight: false,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
            ready() { console.log('Cropper ready for:', img.src); }
        });
    }, 100);
});

document.getElementById('cropButton').addEventListener('click', function() {
    if (!cropper) { console.warn('No cropper instance!'); return; }
    const canvas = cropper.getCroppedCanvas({ width: 800, height: 800 });
    canvas.toBlob(function(blob) {
        const croppedImage = new File([blob], filesToCrop[currentFileIndex].name, {
            type: filesToCrop[currentFileIndex].type
        });
        croppedImages.push(croppedImage);
        addPreview(canvas.toDataURL(), croppedImages.length - 1);
        cropperModal.hide();
        cropper.destroy();
        cropper = null;
        currentFileIndex++;
        if (currentFileIndex < filesToCrop.length && croppedImages.length < 4) {
            showCropperForFile(filesToCrop[currentFileIndex]);
        } else {
            document.getElementById('productImage').value = '';
        }
    }, filesToCrop[currentFileIndex].type);
});

function addPreview(dataUrl, index) {
    const previewContainer = document.createElement('div');
    previewContainer.className = 'preview-container';
    previewContainer.innerHTML = `
        <img src="${dataUrl}" alt="Cropped preview">
        <span class="remove-image" onclick="removeImage(${index})">×</span>
    `;
    document.getElementById('imagePreview').appendChild(previewContainer);
}

window.removeImage = function(index) {
    croppedImages.splice(index, 1);
    updatePreviews();
};

function updatePreviews() {
    const previewContainer = document.getElementById('imagePreview');
    previewContainer.innerHTML = '';
    croppedImages.forEach((image, index) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            addPreview(e.target.result, index);
        };
        reader.readAsDataURL(image);
    });
}

document.getElementById('addProductForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    if (croppedImages.length === 0) {
        alert('Please add at least one product image');
        return;
    }
    const formData = new FormData(this);
    formData.delete('productImage');
    croppedImages.forEach((image) => {
        formData.append('productImage', image);
    });
    try {
        const response = await fetch(this.action, {
            method: 'POST',
            body: formData
        });
        if (response.ok) {
            window.location.href = '/admin/products';
        } else {
            const data = await response.json();
            alert(data.message || 'Error uploading product');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('Error uploading product');
    }
});
</script>

<%- include('../partials/admin/footer') %> 