<%- include("../../views/partials/admin/header") %>

<!-- Add these in the head section -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    :root {
        --primary-color: #667eea;
        --secondary-color: #764ba2;
        --danger-color: #ef4444;
        --success-color: #10b981;
        --light-gray: #f3f4f6;
        --medium-gray: #e5e7eb;
        --dark-gray: #374151;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--light-gray);
    }

    .main-content {
        padding: 2rem;
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        padding: 1.5rem 2rem;
        border-radius: 0.75rem;
        margin-bottom: 2rem;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0;
    }

    .form-card {
        background: white;
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .card-header {
        background-color: #f9fafb;
        color: var(--dark-gray);
        padding: 1rem 1.5rem;
        font-weight: 600;
        border-bottom: 1px solid var(--medium-gray);
    }

    .card-body {
        padding: 1.5rem;
    }

    .form-label {
        font-weight: 500;
        color: var(--dark-gray);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-control, .form-select {
        border: 1px solid var(--medium-gray);
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        transition: all 0.2s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
    }
    
    .form-control.is-invalid, .form-select.is-invalid {
        border-color: var(--danger-color);
    }
    .invalid-feedback {
        color: var(--danger-color);
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.2s ease;
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
    
    #image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-top: 1rem;
    }

    .preview-container {
        position: relative;
        width: 120px;
        height: 120px;
        border: 1px solid var(--medium-gray);
        border-radius: 0.5rem;
        overflow: hidden;
    }
    
    .preview-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 14px;
    }
</style>

<div class="main-content">
    <div class="page-header">
        <h2 class="page-title">âœ¨ Add New Product</h2>
        <p class="mb-0 mt-1 opacity-90">Fill in the details to add a new product to your store.</p>
    </div>

    <form id="productForm" novalidate>
        <div class="row">
            <div class="col-lg-8">
                <div class="card form-card mb-4">
                    <div class="card-header">Product Information</div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="productName" required>
                            <div class="invalid-feedback">Product name is required.</div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="4" required></textarea>
                            <div class="invalid-feedback">A brief description is required.</div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="regularPrice" class="form-label">Regular Price</label>
                                <input type="number" class="form-control" id="regularPrice" name="regularPrice" min="1" required>
                                <div class="invalid-feedback">Price must be at least 1.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="salesPrice" class="form-label">Sales Price</label>
                                <input type="number" class="form-control" id="salesPrice" name="salesPrice" min="1" required>
                                <div class="invalid-feedback">Sales price must be less than regular price.</div>
                            </div>
                        </div>
                         <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="category" class="form-label">Category</label>
                                <select class="form-select" id="category" name="category" required>
                                    <option value="" selected disabled>Select a category</option>
                                    <% categories.forEach(category => { %>
                                        <option value="<%= category.name %>"><%= category.name %></option>
                                    <% }); %>
                                </select>
                                <div class="invalid-feedback">Please select a category.</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="brand" class="form-label">Brand</label>
                                <select class="form-select" id="brand" name="brand" required>
                                    <option value="" selected disabled>Select a brand</option>
                                     <% brands.forEach(brand => { %>
                                        <option value="<%= brand.brandName %>"><%= brand.brandName %></option>
                                    <% }); %>
                                </select>
                                <div class="invalid-feedback">Please select a brand.</div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" min="1" required>
                            <div class="invalid-feedback">Quantity must be at least 1.</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card form-card mb-4">
                    <div class="card-header">Product Images</div>
                    <div class="card-body">
                        <input type="file" class="form-control" id="images" name="images" multiple accept="image/jpeg, image/png, image/jpg">
                        <div id="image-preview-container"></div>
                        <div class="invalid-feedback d-block" id="images-error" style="display:none;">At least one image is required.</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="text-end">
            <button type="submit" class="btn btn-primary">Publish Product</button>
        </div>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('productForm');
    const imageInput = document.getElementById('images');
    const previewContainer = document.getElementById('image-preview-container');
    let uploadedFiles = [];

    const validateForm = () => {
        let isValid = true;
        const errors = [];

        form.querySelectorAll('[required]').forEach(field => {
            field.classList.remove('is-invalid');
        });
        document.getElementById('images-error').style.display = 'none';

        const productName = form.querySelector('#productName');
        if (!productName.value.trim()) {
            productName.classList.add('is-invalid');
            errors.push('Product name is required.');
            isValid = false;
        }

        const description = form.querySelector('#description');
        if (!description.value.trim()) {
            description.classList.add('is-invalid');
            errors.push('Description is required.');
            isValid = false;
        }

        const regularPrice = form.querySelector('#regularPrice');
        const salesPrice = form.querySelector('#salesPrice');
        const regularPriceValue = parseFloat(regularPrice.value);
        const salesPriceValue = parseFloat(salesPrice.value);

        if (isNaN(regularPriceValue) || regularPriceValue < 1) {
            regularPrice.classList.add('is-invalid');
            errors.push('Regular price must be at least 1.');
            isValid = false;
        }
        
        if (isNaN(salesPriceValue) || salesPriceValue < 1) {
            salesPrice.classList.add('is-invalid');
            errors.push('Sales price must be at least 1.');
            isValid = false;
        } else if (salesPriceValue > regularPriceValue) {
            salesPrice.classList.add('is-invalid');
            errors.push('Sales price cannot be more than regular price.');
            isValid = false;
        }

        const category = form.querySelector('#category');
        if (!category.value) {
            category.classList.add('is-invalid');
            errors.push('Please select a category.');
            isValid = false;
        }
        
        const brand = form.querySelector('#brand');
        if (!brand.value) {
            brand.classList.add('is-invalid');
            errors.push('Please select a brand.');
            isValid = false;
        }

        const quantity = form.querySelector('#quantity');
        if (isNaN(parseInt(quantity.value)) || parseInt(quantity.value) < 1) {
            quantity.classList.add('is-invalid');
            errors.push('Quantity must be at least 1.');
            isValid = false;
        }

        if (uploadedFiles.length === 0) {
            document.getElementById('images-error').style.display = 'block';
            errors.push('At least one image is required.');
            isValid = false;
        }
        
        return { isValid, errors };
    };

    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        const { isValid, errors } = validateForm();

        if (!isValid) {
            Swal.fire("Error", "Please fill all required fields properly.", "error");
            return;
        }

        const formData = new FormData();
        formData.append('productName', form.querySelector('#productName').value);
        formData.append('description', form.querySelector('#description').value);
        formData.append('regularPrice', form.querySelector('#regularPrice').value);
        formData.append('salesPrice', form.querySelector('#salesPrice').value);
        formData.append('category', form.querySelector('#category').value);
        formData.append('brand', form.querySelector('#brand').value);
        formData.append('quantity', form.querySelector('#quantity').value);

        uploadedFiles.forEach(file => {
            formData.append('images', file);
        });

        try {
            const response = await fetch('/admin/addProducts', {
                method: 'POST',
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                await Swal.fire("Success", "Product published successfully!", "success");
                window.location.href = '/admin/products';
            } else {
                Swal.fire("Error", result.error || 'An unexpected error occurred.', "error");
            }
        } catch (error) {
            console.error('Submission error:', error);
            Swal.fire("Error", "Could not connect to the server.", "error");
        }
    });

    imageInput.addEventListener('change', function(event) {
        const files = Array.from(event.target.files);
        const totalImages = uploadedFiles.length + files.length;

        if (totalImages > 4) {
            Swal.fire("Error", "You can upload a maximum of 4 images.", "error");
            return;
        }

        files.forEach(file => {
            if (!file.type.startsWith('image/')) return;
            uploadedFiles.push(file);
        });
        
        updateImagePreviews();
        imageInput.value = ''; 
    });

    function updateImagePreviews() {
        previewContainer.innerHTML = '';
        uploadedFiles.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                const previewWrapper = document.createElement('div');
                previewWrapper.className = 'preview-container';
                
                const img = document.createElement('img');
                img.src = e.target.result;

                const removeBtn = document.createElement('button');
                removeBtn.className = 'remove-image';
                removeBtn.innerHTML = 'Ã—';
                removeBtn.onclick = () => {
                    uploadedFiles.splice(index, 1);
                    updateImagePreviews();
                };

                previewWrapper.appendChild(img);
                previewWrapper.appendChild(removeBtn);
                previewContainer.appendChild(previewWrapper);
            };
            reader.readAsDataURL(file);
        });
    }
});
</script>

<%- include("../../views/partials/admin/footer") %> 