<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>My Cart - Perfume Boutique</title>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@600&family=Open+Sans&display=swap" rel="stylesheet">
  <!-- Add SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <style>
    body {
      font-family: 'Open Sans', sans-serif;
      background-color: #fefefe;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 1000px;
      margin: 40px auto;
      padding: 20px;
      background: #fff;
      box-shadow: 0 0 20px rgba(0,0,0,0.08);
      border-radius: 10px;
    }
    h1 {
      font-family: 'Playfair Display', serif;
      font-size: 36px;
      color: #333;
      margin-bottom: 30px;
      text-align: center;
    }
    .cart-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 25px;
      border-bottom: 1px solid #eee;
      padding-bottom: 15px;
    }
    .cart-item img {
      width: 100px;
      height: 120px;
      object-fit: cover;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
    .cart-info {
      flex: 1;
      margin-left: 20px;
    }
    .cart-info h3 {
      margin: 0;
      font-size: 22px;
      color: #222;
    }
    .price {
      color: #999;
      font-size: 18px;
      margin-top: 5px;
    }
    .item-total {
      color: #333;
      font-size: 18px;
      font-weight: bold;
      margin-top: 5px;
    }
    .quantity-controls {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .quantity-controls button {
      width: 30px;
      height: 30px;
      font-size: 18px;
      border: none;
      background-color: #ddd;
      color: #333;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .quantity-controls button:hover {
      background-color: #ccc;
    }
    .quantity-controls button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    .quantity-controls input {
      width: 40px;
      text-align: center;
      border: 1px solid #ccc;
      border-radius: 4px;
      height: 30px;
      font-size: 16px;
    }
    .remove-btn {
      color: #a00;
      background: none;
      border: none;
      font-size: 16px;
      cursor: pointer;
      padding: 5px 10px;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    .remove-btn:hover {
      background-color: #fee;
    }
    .disabled {
      opacity: 0.5;
      pointer-events: none;
    }
    .checkout-btn {
      background-color: #222;
      color: #fff;
      padding: 12px 30px;
      font-size: 16px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      float: right;
      margin-top: 20px;
      transition: background-color 0.2s;
    }
    .checkout-btn:hover {
      background-color: #444;
    }
    .empty-cart {
      text-align: center;
      color: #777;
      font-size: 20px;
      padding: 50px 0;
    }
    .cart-total {
      text-align: right;
      margin-top: 20px;
      font-size: 20px;
      color: #333;
    }
    .alert {
      padding: 10px;
      margin-bottom: 20px;
      border-radius: 4px;
      text-align: center;
    }
    .alert-success {
      background-color: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .alert-danger {
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
    .cart-summary {
      margin-top: 20px;
      padding: 20px;
      background-color: #f8f9fa;
      border-radius: 8px;
    }
    .cart-summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      font-size: 16px;
    }
    .cart-summary-row.total {
      font-size: 20px;
      font-weight: bold;
      border-top: 1px solid #ddd;
      padding-top: 10px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Your Perfume Cart</h1>

    <% if (message) { %>
      <div class="alert alert-success"><%= message %></div>
    <% } %>
    <% if (error) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <% if (!cart || !cart.items || cart.items.length === 0) { %>
      <div class="empty-cart">
        Your cart smells empty. Add some elegance!
      </div>
    <% } else { %>
      <% cart.items.forEach(item => { %>
        <div class="cart-item" id="cart-item-<%= item.product._id %>">
          <a href="/user/productDetails?id=<%= item.product._id %>" class="item-image">
            <img src="/uploads/re-image/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>">
          </a>
          
          <div class="cart-info">
            <h3><%= item.product.productName %></h3>
            <div class="price">₹<%= item.product.salesPrice %> per item</div>
            <div class="item-total">Total: ₹<span id="item-total-<%= item.product._id %>"><%= item.product.salesPrice * item.quantity %></span></div>
          </div>

          <div class="quantity-controls">
            <button onclick="updateQuantity('<%= item.product._id %>', 'decrement')" 
                    <%= item.quantity <= 1 ? 'disabled' : '' %>>-</button>
            <input type="text" value="<%= item.quantity %>" readonly id="quantity-<%= item.product._id %>">
            <button onclick="updateQuantity('<%= item.product._id %>', 'increment')"
                    <%= item.quantity >= Math.min(item.product.quantity, 5) ? 'disabled' : '' %>>+</button>
          </div>

          <button class="remove-btn" onclick="removeFromCart('<%= item.product._id %>')">
            Remove
          </button>
        </div>
      <% }); %>

      <div class="cart-summary">
        <div class="cart-summary-row">
          <span>Subtotal:</span>
          <span>₹<span id="cart-subtotal"><%= cart.totalPrice %></span></span>
        </div>
        <div class="cart-summary-row">
          <span>Shipping:</span>
          <span>Free</span>
        </div>
        <div class="cart-summary-row total">
          <span>Total:</span>
          <span>₹<span id="cart-total"><%= cart.totalPrice %></span></span>
        </div>
      </div>

      <button class="checkout-btn" onclick="window.location.href='/user/checkout'">
        Proceed to Checkout
      </button>
    <% } %>
  </div>

  <!-- Add SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    async function updateQuantity(productId, action) {
      try {
        const response = await fetch('/user/cart/update-quantity', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId, action })
        });

        const data = await response.json();
        
        if (response.ok) {
          const quantityElement = document.getElementById(`quantity-${productId}`);
          const itemElement = document.getElementById(`cart-item-${productId}`);
          const incrementBtn = itemElement.querySelector('button:last-of-type');
          const decrementBtn = itemElement.querySelector('button:first-of-type');
          const itemTotalElement = document.getElementById(`item-total-${productId}`);

          quantityElement.value = data.newQuantity;
          
          // Update button states
          decrementBtn.disabled = data.newQuantity <= 1;
          incrementBtn.disabled = data.newQuantity >= 5;

          // Update item total
          const pricePerItem = parseFloat(itemElement.querySelector('.price').textContent.replace('₹', '').replace(' per item', ''));
          const newItemTotal = pricePerItem * data.newQuantity;
          itemTotalElement.textContent = newItemTotal.toFixed(2);

          // Update total price
          updateTotalPrice();
        } else {
          // Show SweetAlert for maximum/minimum quantity
          if (data.error) {
            Swal.fire({
              icon: 'warning',
              title: 'Oops!',
              text: data.error === 'Maximum quantity reached' ? 'Maximum stock reached' : 'Minimum stock reached',
              confirmButtonColor: '#3085d6'
            });
          }
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Error updating quantity',
          confirmButtonColor: '#3085d6'
        });
      }
    }

    async function removeFromCart(productId) {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/user/cart/remove/${productId}`, {
            method: 'GET'
          });

          const data = await response.json();
          
          if (response.ok) {
            const itemElement = document.getElementById(`cart-item-${productId}`);
            itemElement.remove();
            
            // Update total price
            updateTotalPrice();

            // Show success message
            Swal.fire({
              icon: 'success',
              title: 'Removed!',
              text: 'Item has been removed from cart',
              timer: 1500,
              showConfirmButton: false
            });

            // Check if cart is empty
            const remainingItems = document.querySelectorAll('.cart-item');
            if (remainingItems.length === 0) {
              location.reload();
            }
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: data.error || 'Error removing item',
              confirmButtonColor: '#3085d6'
            });
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Error removing item',
            confirmButtonColor: '#3085d6'
          });
        }
      }
    }

    async function updateTotalPrice() {
      try {
        const response = await fetch('/user/cart');
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const newTotal = doc.getElementById('cart-total').textContent;
        document.getElementById('cart-total').textContent = newTotal;
        document.getElementById('cart-subtotal').textContent = newTotal;
      } catch (error) {
        console.error('Error updating total:', error);
      }
    }
  </script>

<%- include("../../views/partials/user/footer") %>
