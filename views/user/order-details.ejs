<%- include('../partials/user/header') %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .order-details-card {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .table img {
            max-width: 50px;
            height: auto;
        }
        .item-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            margin-right: 15px;
        }
        .item-actions {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 8px;
        }
        .status-badge {
            display: inline-block;
            padding: 0.35em 0.65em;
            font-size: 0.75em;
            font-weight: 700;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.375rem;
            color: #fff;
        }
        .bg-success { background-color: #10b981; }
        .bg-danger { background-color: #ef4444; }
        .bg-info { background-color: #3b82f6; }
        .bg-warning { background-color: #f59e0b; }
    </style>
</head>

<div class="container mx-auto mt-5 px-4">
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Order Details: <%= order.orderID %></h1>
    <a href="/user/orders" class="inline-block mb-6 text-blue-600 hover:underline">← Back to Orders</a>

    <% // Order Summary Section %>
    <div class="order-details-card mb-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Order Summary</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <p class="text-gray-600 mb-2"><strong>Status:</strong>
                     <% let orderStatusClass = '';
                        switch(order.status) {
                           case 'delivered': orderStatusClass = 'bg-success'; break;
                           case 'cancelled':
                           case 'return-cancelled': orderStatusClass = 'bg-danger'; break;
                           case 'return-pending': orderStatusClass = 'bg-info'; break;
                           default: orderStatusClass = 'bg-warning';
                        }
                     %>
                    <span class="status-badge <%= orderStatusClass %>">
                         <%= order.status.charAt(0).toUpperCase() + order.status.slice(1).replace('-', ' ') %>
                    </span>
                </p>
                <p class="text-gray-600 mb-2"><strong>Date:</strong> <%= new Date(order.createdAt).toLocaleDateString('en-IN') %></p>
                <p class="text-gray-600 mb-2"><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
                <p class="text-gray-600 mb-2"><strong>Payment Status:</strong>
                     <% let paymentStatusClass = '';
                         switch(order.paymentStatus) {
                             case 'paid':
                             case 'refunded': paymentStatusClass = 'bg-success'; break;
                             default: paymentStatusClass = 'bg-warning';
                         }
                     %>
                     <span class="status-badge <%= paymentStatusClass %>">
                        <%= order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) %>
                     </span>
                </p>
                 <% if (order.trackingNumber) { %>
                    <p class="text-gray-600 mb-2"><strong>Tracking Number:</strong> <%= order.trackingNumber %></p>
                <% } %>
                <% if (order.expectedDelivery) { %>
                    <p class="text-gray-600 mb-2"><strong>Expected Delivery:</strong> <%= new Date(order.expectedDelivery).toLocaleDateString('en-IN') %></p>
                <% } %>
                 <% if (order.cancellationReason) { %>
                    <p class="text-gray-600 mb-2"><strong>Cancellation Reason:</strong> <%= order.cancellationReason %></p>
                <% } %>
                 <% if (order.returnReason) { %>
                    <p class="text-gray-600 mb-2"><strong>Return Reason:</strong> <%= order.returnReason %></p>
                <% } %>

                <% // Display overall return request status message %>
                <% if (order.status === 'return-pending') { %>
                     <div class="mt-4">
                         <span class="text-blue-600 font-semibold">Return Request: Pending Approval</span>
                     </div>
                 <% } else if (order.status === 'returned') { %>
                     <div class="mt-4">
                          <span class="text-green-600 font-semibold">Return Approved. Refund has been credited to your wallet.</span>
                          <% if (order.adminNotes) { %>
                               <p class="text-gray-600 text-sm mt-1"><strong>Admin Notes:</strong> <%= order.adminNotes %></p>
                          <% } %>
                     </div>
                 <% } else if (order.status === 'return-cancelled') { %>
                      <div class="mt-4">
                          <span class="text-red-600 font-semibold">Return Rejected by Admin.</span>
                          <% if (order.adminNotes) { %>
                               <p class="text-gray-600 text-sm mt-1"><strong>Admin Reason:</strong> <%= order.adminNotes %></p>
                          <% } %>
                      </div>
                 <% } %>

            </div>
            <div>
                <p class="text-gray-600 mb-2"><strong>Shipping Address:</strong></p>
                <p class="text-gray-600 mb-1"><%= order.shippingAddress.name %></p>
                <p class="text-gray-600 mb-1"><%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %></p>
                <p class="text-gray-600">Phone: <%= order.shippingAddress.phone %></p>
                <% if (order.shippingAddress.altPhone) { %>
                     <p class="text-gray-600">Alt Phone: <%= order.shippingAddress.altPhone %></p>
                <% } %>

                <div class="mt-4">
                    <p class="text-gray-600 mb-1"><strong>Subtotal:</strong> ₹<%= order.subtotal %></p>
                    <p class="text-gray-600 mb-1"><strong>Tax:</strong> ₹<%= order.tax %></p>
                    <p class="text-gray-600 mb-1"><strong>Discount:</strong> ₹<%= order.discount %></p>
                    <h3 class="text-lg font-bold text-gray-800">Final Total: ₹<%= order.finalTotal %></h3>
                </div>

                <a href="/user/orders/<%= order.orderID %>/invoice" class="btn btn-success btn-sm mt-4 inline-block">Download Invoice</a>

            </div>
        </div>
    </div>

    <% // Items Section %>
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Items</h2>
    <div class="grid grid-cols-1 gap-4">
        <% order.items.forEach(item => { %>
            <div class="order-details-card p-4 flex flex-col md:flex-row items-start md:items-center justify-between">
                <div class="flex items-center mb-4 md:mb-0">
                    <img src="/uploads/re-image/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="item-image">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-800 mb-1"><%= item.product.productName %></h3>
                        <p class="text-gray-600 mb-1">Qty: <%= item.quantity %></p>
                        <p class="text-gray-600 mb-1">Price: ₹<%= item.price %></p>
                        <% console.log('Item ID:', item._id, 'Item Name:', item.product.productName, 'Status:', item.status); %>
                        <p class="text-gray-600">Status:
                            <% let itemStatusClass = '';
                               switch(item.status) {
                                  case 'delivered':
                                  case 'return accepted': itemStatusClass = 'bg-success'; break;
                                  case 'cancelled':
                                  case 'return rejected': itemStatusClass = 'bg-danger'; break;
                                  case 'return requested': itemStatusClass = 'bg-info'; break;
                                  default: itemStatusClass = 'bg-warning';
                               }
                            %>
                            <span class="status-badge <%= itemStatusClass %>">
                                <%= item.status.charAt(0).toUpperCase() + item.status.slice(1).replace(' ', '-') %>
                            </span>
                        </p>
                         <% if (item.status === 'cancelled' && item.cancellationReason) { %>
                            <div class="text-xs text-red-500 mt-1">Reason: <%= item.cancellationReason %></div>
                        <% } %>
                         <% if ((item.status === 'returned' || item.status === 'return accepted') && order.adminNotes) { %>
                             <div class="text-xs text-green-500 mt-1">Admin Notes: <%= order.adminNotes %></div>
                         <% } %>
                         <% if (item.status === 'return rejected' && order.adminNotes) { %>
                              <div class="text-xs text-red-500 mt-1">Admin Reason: <%= order.adminNotes %></div>
                         <% } %>
                    </div>
                </div>
                <div class="item-actions">
                    <% // Item-specific Return Button or Status Message %>
                    <% // Show return button only if item is delivered and not cancelled or in a return state %>
                    <% if (item.status === 'delivered' && item.status !== 'cancelled' && item.status !== 'return requested' && item.status !== 'returned' && item.status !== 'return accepted' && item.status !== 'return rejected') { %>
                         <button
                            onclick="returnItem('<%= order.orderID %>', '<%= item._id %>')"
                            class="btn btn-warning btn-sm"
                        >
                            Return Item
                        </button>
                    <% } else if (item.status === 'return requested') { %>
                         <span class="text-blue-600 text-sm font-semibold">Return requested</span>
                    <% } else if (item.status === 'returned' || item.status === 'return accepted') { %>
                         <span class="text-green-600 text-sm font-semibold">Return Approved</span>
                         <% if (order.adminNotes) { %>
                              <span class="text-gray-600 text-xs mt-1">Notes: <%= order.adminNotes %></span>
                         <% } %>
                    <% } else if (item.status === 'return rejected') { %>
                         <span class="text-red-600 text-sm font-semibold">Return rejected</span>
                          <% if (order.adminNotes) { %>
                              <span class="text-gray-600 text-xs mt-1">Reason: <%= order.adminNotes %></span>
                         <% } %>
                    <% } %>

                    <% // Item-specific Cancel Button or Message %>
                    <% // Show cancel button if item is in a state where cancellation is possible %>
                    <% if (item.status !== 'cancelled' && item.status !== 'delivered' && item.status !== 'return requested' && item.status !== 'returned' && item.status !== 'return accepted' && item.status !== 'return rejected' && item.status !== 'refunded') { %>
                        <button
                            onclick="cancelItem('<%= order.orderID %>', '<%= item._id %>')"
                            class="btn btn-danger btn-sm"
                        >
                            Cancel Item
                        </button>
                    <% } else if (item.status === 'cancelled') { %>
                        <span class="text-red-600 text-sm font-semibold">❗ This item has already been cancelled.</span>
                    <% } %>

                </div>
            </div>
        <% }) %>
    </div>

</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
// Function for canceling order (keeping for full order cancel route if it exists elsewhere)
function cancelOrder(orderId) {
    Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure you want to cancel this order? Please provide a reason (optional).',
        input: 'text',
        inputPlaceholder: 'Enter cancellation reason (optional)',
        showCancelButton: true,
        confirmButtonText: 'Cancel Order',
        cancelButtonText: 'Keep Order',
        preConfirm: (reason) => {
            return fetch(`/user/orders/${orderId}/cancel`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cancellationReason: reason })
            }).then(response => {
                if (!response.ok) throw new Error('Failed to cancel order');
                return response;
            });
        }
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success').then(() => location.reload());
        }
    }).catch((error) => {
        Swal.fire('Error!', 'Failed to cancel order.', 'error');
    });
}

function cancelItem(orderId, itemId) {
    Swal.fire({
        title: 'Cancel Item',
        text: 'Are you sure you want to cancel this item? Please provide a reason (optional).',
        input: 'text',
        inputPlaceholder: 'Enter cancellation reason (optional)',
        showCancelButton: true,
        confirmButtonText: 'Cancel Item',
        cancelButtonText: 'Keep Item',
        preConfirm: (reason) => {
            return fetch(`/user/orders/${orderId}/cancel`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cancellationReason: reason, itemIds: [itemId] })
            }).then(response => {
                if (!response.ok) throw new Error('Failed to cancel item');
                return response;
            });
        }
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire('Cancelled!', 'The item has been cancelled.', 'success').then(() => location.reload());
        }
    }).catch((error) => {
        Swal.fire('Error!', 'Failed to cancel item.', 'error');
    });
}

function returnOrder(orderId) {
    Swal.fire({
        title: 'Return Order',
        text: 'Are you sure you want to return this order? Please provide a reason (mandatory).',
        input: 'text',
        inputPlaceholder: 'Enter return reason',
        showCancelButton: true,
        confirmButtonText: 'Return Order',
        cancelButtonText: 'Keep Order',
        preConfirm: (reason) => {
            if (!reason) {
                Swal.showValidationMessage('Return reason is required');
                return false;
            }
            return fetch(`/user/orders/${orderId}/return`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ returnReason: reason })
            }).then(response => {
                if (!response.ok) throw new Error('Failed to return order');
                return response;
            });
        }
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire('Returned!', 'Your return request has been submitted.', 'success').then(() => location.reload());
        }
    }).catch((error) => {
        Swal.fire('Error!', 'Failed to return order.', 'error');
    });
}

function returnItem(orderId, itemId) {
    Swal.fire({
        title: 'Return Item',
        text: 'Are you sure you want to return this item? Please provide a reason (mandatory).',
        input: 'text',
        inputPlaceholder: 'Enter return reason',
        showCancelButton: true,
        confirmButtonText: 'Return Item',
        cancelButtonText: 'Keep Item',
        preConfirm: (reason) => {
            if (!reason) {
                Swal.showValidationMessage('Return reason is required');
                return false;
            }
            return fetch(`/user/orders/${orderId}/return`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ returnReason: reason, itemIds: [itemId] })
            }).then(response => {
                if (!response.ok) throw new Error('Failed to return item');
                return response;
            });
        }
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire('Returned!', 'Your return request for the item has been submitted.', 'success').then(() => location.reload());
        }
    }).catch((error) => {
        Swal.fire('Error!', 'Failed to return item.', 'error');
    });
}
</script>

<%- include('../partials/user/footer') %>