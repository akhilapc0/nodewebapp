<%- include("../../views/partials/user/header") %>

<div class="container mt-4">
  <div class="row">
    <!-- Address Section -->
    <div class="col-md-6">
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Delivery Address</h5>
          <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addAddressModal">
            Add New Address
          </button>
        </div>
        <div class="card-body">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(address => { %>
              <div class="address-card mb-3 p-3 border rounded">
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="address" 
                         id="address-<%= address._id %>" 
                         value="<%= address._id %>"
                         <%= address.isDefault ? 'checked' : '' %>>
                  <label class="form-check-label" for="address-<%= address._id %>">
                    <strong><%= address.name %></strong>
                    <p class="mb-1"><%= address.street %></p>
                    <p class="mb-1"><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                    <p class="mb-1">Phone: <%= address.phone %></p>
                    <div class="mt-2">
                      <button class="btn btn-sm btn-outline-primary edit-address" 
                              data-address-id="<%= address._id %>"
                              data-bs-toggle="modal" 
                              data-bs-target="#editAddressModal">
                        Edit
                      </button>
                      <% if (!address.isDefault) { %>
                        <button class="btn btn-sm btn-outline-secondary set-default" 
                                data-address-id="<%= address._id %>">
                          Set as Default
                        </button>
                      <% } %>
                    </div>
                  </label>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <p class="text-center">No addresses found. Please add a delivery address.</p>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Order Summary Section -->
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">Order Summary</h5>
        </div>
        <div class="card-body">
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <% cart.items.forEach(item => { %>
              <div class="d-flex mb-3">
                <img src="/product-images/<%= item.product.productImage[0] %>" 
                     alt="<%= item.product.productName %>" 
                     class="checkout-product-img">
                <div class="ms-3">
                  <h6><%= item.product.productName %></h6>
                  <p class="mb-1">Quantity: <%= item.quantity %></p>
                  <p class="mb-0">₹<%= item.product.salesPrice * item.quantity %></p>
                </div>
              </div>
            <% }); %>

            <hr>

            <div class="d-flex justify-content-between mb-2">
              <span>Subtotal:</span>
              <span>₹<%= subtotal.toFixed(2) %></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Shipping:</span>
              <span>Free</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Tax (5%):</span>
              <span>₹<%= tax.toFixed(2) %></span>
            </div>
            <% if (discount && discount > 0) { %>
              <div class="d-flex justify-content-between mb-2 text-success">
                <span>Discount:</span>
                <span>-₹<%= discount.toFixed(2) %></span>
              </div>
            <% } %>
            <hr>
            <div class="d-flex justify-content-between mb-3">
              <strong>Total:</strong>
              <strong>₹<%= finalTotal.toFixed(2) %></strong>
            </div>

            <h6 class="mt-4 mb-3">Select Payment Method</h6>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="paymentCod" value="COD" checked>
              <label class="form-check-label" for="paymentCod">
                Cash on Delivery (COD)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="paymentRazorpay" value="Razorpay">
              <label class="form-check-label" for="paymentRazorpay">
                Razorpay
              </label>
            </div>

            <button class="btn btn-primary w-100 mt-4" onclick="placeOrder()" id="placeOrderBtn">
              Place Order
            </button>
          <% } else { %>
            <p class="text-center">Your cart is empty.</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addAddressForm">
          <div class="mb-3">
            <label class="form-label">Full Name</label>
            <input type="text" class="form-control" name="name" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Phone Number</label>
            <input type="tel" class="form-control" name="phone" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Street Address</label>
            <input type="text" class="form-control" name="street" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Landmark</label>
            <input type="text" class="form-control" name="landMark">
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">City</label>
              <input type="text" class="form-control" name="city" required>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">State</label>
              <input type="text" class="form-control" name="state" required>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">PIN Code</label>
            <input type="text" class="form-control" name="pincode" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Address Type (e.g., Home, Work)</label>
            <input type="text" class="form-control" name="addressType" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Alternate Phone Number (Optional)</label>
            <input type="tel" class="form-control" name="altPhone">
          </div>
          <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" name="isDefault" id="isDefault">
            <label class="form-check-label" for="isDefault">Set as default address</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveAddress()">Save Address</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editAddressForm">
          <input type="hidden" name="addressId">
          <div class="mb-3">
            <label class="form-label">Full Name</label>
            <input type="text" class="form-control" name="name" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Phone Number</label>
            <input type="tel" class="form-control" name="phone" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Street Address</label>
            <input type="text" class="form-control" name="street" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Landmark</label>
            <input type="text" class="form-control" name="landMark">
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">City</label>
              <input type="text" class="form-control" name="city" required>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">State</label>
              <input type="text" class="form-control" name="state" required>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">PIN Code</label>
            <input type="text" class="form-control" name="pincode" required>
          </div>
           <div class="mb-3">
            <label class="form-label">Address Type (e.g., Home, Work)</label>
            <input type="text" class="form-control" name="addressType" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Alternate Phone Number (Optional)</label>
            <input type="tel" class="form-control" name="altPhone">
          </div>
          <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" name="isDefault" id="editIsDefault">
            <label class="form-check-label" for="editIsDefault">Set as default address</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="updateAddress()">Update Address</button>
      </div>
    </div>
  </div>
</div>

<style>
.checkout-product-img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 4px;
}
.address-card {
  background-color: #f8f9fa;
}
</style>

<script>
// Save new address
async function saveAddress() {
  console.log("saveAddress function called");
  const form = document.getElementById('addAddressForm');
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());

  if (!data.name || !data.city || !data.state || !data.pincode || !data.phone || !data.addressType) {
      Swal.fire({
          icon: 'warning',
          title: 'Missing Fields',
          text: 'Please fill in all required fields.'
      });
      console.log("Missing required fields:", data);
      return;
  }

  try {
    const response = await fetch('/add-address', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    
    if (response.ok) {
      location.reload();
    } else {
      const error = await response.json();
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to save address'
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An unexpected error occurred'
    });
  }
}

// Edit address
document.querySelectorAll('.edit-address').forEach(button => {
  button.addEventListener('click', async () => {
    const addressId = button.dataset.addressId;
    try {
      const response = await fetch(`/address/${addressId}`);
      const address = await response.json();

      const form = document.getElementById('editAddressForm');
      form.addressId.value = address._id;
      form.name.value = address.name;
      form.phone.value = address.phone;
      form.street.value = address.street;
      form.city.value = address.city;
      form.state.value = address.state;
      form.pincode.value = address.pincode;
      form.isDefault.checked = address.isDefault;
      form.landMark.value = address.landMark ? address.landMark : '';
      form.altPhone.value = address.altPhone ? address.altPhone : '';
       form.addressType.value = address.addressType || '';
    } catch (error) {
      console.error('Error:', error);
    }
  });
});

// Update address
async function updateAddress() {
  const form = document.getElementById('editAddressForm');
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());
  const addressId = data.addressId;
  delete data.addressId;
  
   if (!data.name || !data.city || !data.state || !data.pincode || !data.phone || !data.addressType) {
      Swal.fire({
          icon: 'warning',
          title: 'Missing Fields',
          text: 'Please fill in all required fields.'
      });
      console.log("Missing required fields:", data);
      return;
  }

  try {
    const response = await fetch(`/address/${addressId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    
    if (response.ok) {
      location.reload();
    } else {
      const error = await response.json();
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to update address'
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to update address'
    });
  }
}

// Set default address
document.querySelectorAll('.set-default').forEach(button => {
  button.addEventListener('click', async () => {
    const addressId = button.dataset.addressId;
    try {
      const response = await fetch(`/address/${addressId}/default`, {
        method: 'PUT'
      });
      
      if (response.ok) {
        location.reload();
      } else {
        const error = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to set default address'
        });
      }
    } catch (error) {
      console.error('Error:', error);
    }
  });
});

// Place order
async function placeOrder() {
  const selectedAddress = document.querySelector('input[name="address"]:checked');
  
  if (!selectedAddress) {
    Swal.fire({
      icon: 'warning',
      title: 'No Address Selected',
      text: 'Please select a delivery address'
    });
    return;
  }

  const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
  if (!selectedPaymentMethod) {
       Swal.fire({
         icon: 'warning',
         title: 'No Payment Method Selected',
         text: 'Please select a payment method'
       });
       return;
  }

  try {
    const response = await fetch('/place-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        addressId: selectedAddress.value,
        paymentMethod: selectedPaymentMethod.value
      })
    });

    if (response.ok) {
      const result = await response.json();
      window.location.href = `/order/success/${result.orderId}`;
    } else {
      const error = await response.json();
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to place order'
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to place order'
    });
  }
}
</script>

<%# Added SweetAlert library %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<%- include("../../views/partials/user/footer") %>