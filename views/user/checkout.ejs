<%- include("../../views/partials/user/header") %>

<div class="container mt-4">
  <div class="row">
    <!-- Address Section -->
    <div class="col-md-6">
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Delivery Address</h5>
          <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addAddressModal">
            Add New Address
          </button>
        </div>
        <div class="card-body">
          <% if (addresses && addresses.length > 0) { %>
            <div class="row g-3">
              <% addresses.forEach(address => { %>
                <div class="col-12">
                  <div class="card address-card <%= address.isDefault ? 'border-primary bg-light' : '' %> shadow-sm">
                    <div class="card-body d-flex flex-column flex-md-row align-items-md-center justify-content-between">
                      <div class="d-flex align-items-start">
                        <input type="radio" name="address" value="<%= address._id %>" class="me-3 mt-2" <%= address.isDefault ? 'checked' : '' %>>
                        <div>
                          <div class="d-flex align-items-center mb-2">
                            <strong class="me-2"><%= address.name %></strong>
                            <% if (address.isDefault) { %>
                              <span class="badge bg-primary">Default</span>
                            <% } %>
                          </div>
                          <div class="text-muted small mb-1"><%= address.street %></div>
                          <div class="text-muted small mb-1"><%= address.city %>, <%= address.state %> <%= address.pincode %></div>
                          <div class="text-muted small mb-1">Phone: <%= address.phone %></div>
                        </div>
                      </div>
                      <div class="mt-3 mt-md-0 d-flex flex-column flex-md-row gap-2">
                        <button class="btn btn-outline-primary btn-sm edit-address"
                                data-address-id="<%= address._id %>"
                                data-bs-toggle="modal"
                                data-bs-target="#editAddressModal">
                          Edit
                        </button>
                        <button class="btn btn-outline-danger btn-sm delete-address"
                                data-address-id="<%= address._id %>">
                          Delete
                        </button>
                        <% if (!address.isDefault) { %>
                          <button class="btn btn-outline-secondary btn-sm set-default"
                                  data-address-id="<%= address._id %>">
                            Set as Default
                          </button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <p class="text-center">No addresses found. Please add a delivery address.</p>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Order Summary Section -->
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">Order Summary</h5>
        </div>
        <div class="card-body">
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <% cart.items.forEach(item => { %>
              <div class="d-flex mb-3">
                <img src="/uploads/product-images/<%= item.product.productImage[0] %>" 
                     alt="<%= item.product.productName %>" 
                     class="checkout-product-img">
                <div class="ms-3">
                  <h6><%= item.product.productName %></h6>
                  <p class="mb-1">Quantity: <%= item.quantity %></p>
                  <p class="mb-0">₹<%= item.product.salesPrice * item.quantity %></p>
                </div>
              </div>
            <% }); %>

            <hr>

            <div class="d-flex justify-content-between mb-2">
              <span>Subtotal:</span>
              <span>₹<%= Math.round(subtotal) %></span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Shipping:</span>
              <span>Free</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
              <span>Tax (5%):</span>
              <span>₹<%= Math.round(tax) %></span>
            </div>
            <% if (discount && discount > 0) { %>
              <div class="d-flex justify-content-between mb-2 text-success">
                <span>Discount:</span>
                <span>-₹<%= Math.round(discount) %></span>
              </div>
            <% } %>
            <hr>
            <div class="d-flex justify-content-between mb-3">
              <strong>Total:</strong>
              <strong>₹<%= Math.round(finalTotal) %></strong>
            </div>

            <h6 class="mt-4 mb-3">Select Payment Method</h6>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="paymentCod" value="COD" checked>
              <label class="form-check-label" for="paymentCod">
                Cash on Delivery (COD)
              </label>
            </div>
            <!-- <div class="form-check">
              <input class="form-check-input" type="radio" name="paymentMethod" id="paymentRazorpay" value="Razorpay">
              <label class="form-check-label" for="paymentRazorpay">
                Razorpay
              </label>
            </div> -->

            <button class="btn btn-primary w-100 mt-4" onclick="placeOrder()" id="placeOrderBtn">
              Place Order
            </button>
          <% } else { %>
            <p class="text-center">Your cart is empty.</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addAddressModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addAddressForm">
          <div class="mb-3">
            <label class="form-label">Full Name</label>
            <input type="text" class="form-control" name="name" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Phone Number</label>
            <input type="tel" class="form-control" name="phone" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Street Address</label>
            <input type="text" class="form-control" name="street" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Landmark</label>
            <input type="text" class="form-control" name="landMark">
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">City</label>
              <input type="text" class="form-control" name="city" required>
              
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">State</label>
              <input type="text" class="form-control" name="state" required>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">PIN Code</label>
            <input type="text" class="form-control" name="pincode" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Address Type (e.g., Home, Work)</label>
            <input type="text" class="form-control" name="addressType" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Alternate Phone Number (Optional)</label>
            <input type="tel" class="form-control" name="altPhone">
          </div>
          <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" name="isDefault" id="isDefault">
            <label class="form-check-label" for="isDefault">Set as default address</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveAddress()">Save Address</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editAddressForm">
          <input type="hidden" name="addressId">
          <div class="mb-3">
            <label class="form-label">Full Name</label>
            <input type="text" class="form-control" name="name" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Phone Number</label>
            <input type="tel" class="form-control" name="phone" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Street Address</label>
            <input type="text" class="form-control" name="street" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Landmark</label>
            <input type="text" class="form-control" name="landMark">
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">City</label>
              <input type="text" class="form-control" name="city" required>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">State</label>
              <input type="text" class="form-control" name="state" required>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">PIN Code</label>
            <input type="text" class="form-control" name="pincode" required>
          </div>
           <div class="mb-3">
            <label class="form-label">Address Type (e.g., Home, Work)</label>
            <input type="text" class="form-control" name="addressType" required>
          </div>
          <div class="mb-3">
            <label class="form-label">Alternate Phone Number (Optional)</label>
            <input type="tel" class="form-control" name="altPhone">
          </div>
          <div class="form-check mb-3">
            <input type="checkbox" class="form-check-input" name="isDefault" id="editIsDefault">
            <label class="form-check-label" for="editIsDefault">Set as default address</label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="updateAddress()">Update Address</button>
      </div>
    </div>
  </div>
</div>

<style>
.checkout-product-img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 4px;
}
.address-card {
  background-color: #f8f9fa;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// Save new address
async function saveAddress() {
  console.log("saveAddress function called");
  const form = document.getElementById('addAddressForm');
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());

  if (!data.name || !data.city || !data.state || !data.pincode || !data.phone || !data.addressType) {
      Swal.fire({
          icon: 'warning',
          title: 'Missing Fields',
          text: 'Please fill in all required fields.'
      });
      console.log("Missing required fields:", data);
      return;
  }

  try {
    const response = await fetch('/user/add-address', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    
    if (response.ok) {
      location.reload();
    } else {
      const error = await response.json();
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to save address'
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An unexpected error occurred'
    });
  }
}

// Edit address
document.querySelectorAll('.edit-address').forEach(button => {
  button.addEventListener('click', async () => {
    const addressId = button.dataset.addressId;
    try {
      const response = await fetch(`/user/edit-address/${addressId}`);
      const address = await response.json();

      const form = document.getElementById('editAddressForm');
      form.addressId.value = address._id;
      form.name.value = address.name;
      form.phone.value = address.phone;
      form.street.value = address.street;
      form.city.value = address.city;
      form.state.value = address.state;
      form.pincode.value = address.pincode;
      form.isDefault.checked = address.isDefault;
      form.landMark.value = address.landMark ? address.landMark : '';
      form.altPhone.value = address.altPhone ? address.altPhone : '';
      form.addressType.value = address.addressType || '';
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to load address details'
      });
    }
  });
});

// Update address
async function updateAddress() {
  const form = document.getElementById('editAddressForm');
  const formData = new FormData(form);
  const data = Object.fromEntries(formData.entries());
  const addressId = data.addressId;
  delete data.addressId;
  
  if (!data.name || !data.city || !data.state || !data.pincode || !data.phone || !data.addressType) {
      Swal.fire({
          icon: 'warning',
          title: 'Missing Fields',
          text: 'Please fill in all required fields.'
      });
      console.log("Missing required fields:", data);
      return;
  }

  try {
    const response = await fetch(`/user/edit-address/${addressId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    
    if (response.ok) {
      location.reload();
    } else {
      const error = await response.json();
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to update address'
      });
    }
  } catch (error) {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to update address'
    });
  }
}

// Set default address
document.querySelectorAll('.set-default').forEach(button => {
  button.addEventListener('click', async () => {
    const addressId = button.dataset.addressId;
    try {
      const response = await fetch(`/user/set-default-address/${addressId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        location.reload();
      } else {
        const error = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Failed to set default address'
        });
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to set default address'
      });
    }
  });
});

// Place order
async function placeOrder() {
  try {
    const selectedAddressElement = document.querySelector('input[name="address"]:checked');
    if (!selectedAddressElement) {
      Swal.fire('Error', 'Please select a delivery address.', 'error');
      return;
    }
    const addressId = selectedAddressElement.value;

    const selectedPaymentMethodElement = document.querySelector('input[name="paymentMethod"]:checked');
    if (!selectedPaymentMethodElement) {
      Swal.fire('Error', 'Please select a payment method.', 'error');
      return;
    }
    const paymentMethod = selectedPaymentMethodElement.value;

    // Make the API call to place the order
    const response = await fetch('/user/place-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ addressId, paymentMethod }),
    });

    const data = await response.json();

    if (data.success) {
      // Redirect to order success page
      window.location.href = `/user/order/success/${data.orderId}`;
    } else {
      // Show error message
      Swal.fire('Error', data.message || 'Failed to place order', 'error');
    }

  } catch (error) {
    console.error('Error placing order:', error);
    Swal.fire('Error', 'Failed to place order. Please try again.', 'error');
  }
}

document.addEventListener('DOMContentLoaded', function() {
  // Delete Address
  document.querySelectorAll('.delete-address').forEach(btn => {
    btn.addEventListener('click', function() {
      const addressId = this.getAttribute('data-address-id');
      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to delete this address?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#e53e3e',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/user/delete-address/${addressId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Deleted!', 'Address deleted successfully.', 'success')
                .then(() => location.reload());
            } else {
              Swal.fire('Error', data.message || 'Failed to delete address', 'error');
            }
          });
        }
      });
    });
  });

  // Set as Default
  document.querySelectorAll('.set-default').forEach(btn => {
    btn.addEventListener('click', function() {
      const addressId = this.getAttribute('data-address-id');
      fetch(`/user/set-default-address/${addressId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          Swal.fire('Success', 'Address set as default.', 'success')
            .then(() => location.reload());
        } else {
          Swal.fire('Error', data.message || 'Failed to set default address', 'error');
        }
      });
    });
  });

  // Edit Address (populate modal)
  document.querySelectorAll('.edit-address').forEach(btn => {
    btn.addEventListener('click', function() {
      const addressId = this.getAttribute('data-address-id');
      fetch(`/user/edit-address/${addressId}`)
        .then(res => res.json())
        .then(data => {
          if (data.success && data.address) {
            document.querySelector('#editAddressForm [name="addressId"]').value = data.address._id;
            document.querySelector('#editAddressForm [name="name"]').value = data.address.name;
            document.querySelector('#editAddressForm [name="phone"]').value = data.address.phone;
            document.querySelector('#editAddressForm [name="street"]').value = data.address.street;
            document.querySelector('#editAddressForm [name="city"]').value = data.address.city;
            document.querySelector('#editAddressForm [name="state"]').value = data.address.state;
            document.querySelector('#editAddressForm [name="pincode"]').value = data.address.pincode;
            document.querySelector('#editAddressForm [name="landMark"]').value = data.address.landMark || '';
            document.querySelector('#editAddressForm [name="addressType"]').value = data.address.addressType || '';
            document.querySelector('#editAddressForm [name="altPhone"]').value = data.address.altPhone || '';
            var editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
            editModal.show();
          } else {
            Swal.fire('Error', 'Failed to load address for editing', 'error');
          }
        });
    });
  });

  // Save Edited Address
  document.querySelector('#editAddressForm .btn-primary').addEventListener('click', function() {
    const form = document.getElementById('editAddressForm');
    const addressId = form.addressId.value;
    const formData = new FormData(form);
    fetch(`/user/edit-address/${addressId}`, {
      method: 'POST',
      body: new URLSearchParams(formData)
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Success', 'Address updated successfully.', 'success')
          .then(() => location.reload());
      } else {
        Swal.fire('Error', data.message || 'Failed to update address', 'error');
      }
    });
  });

  // Add New Address
  document.querySelector('#addAddressForm .btn-primary').addEventListener('click', function() {
    const form = document.getElementById('addAddressForm');
    const formData = new FormData(form);
    fetch('/user/add-address', {
      method: 'POST',
      body: new URLSearchParams(formData)
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Success', 'Address added successfully.', 'success')
          .then(() => location.reload());
      } else {
        Swal.fire('Error', data.message || 'Failed to add address', 'error');
      }
    });
  });
});
</script>

<%- include("../../views/partials/user/footer") %>